import 'dart:convert';
import 'dart:developer';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:profit_league_documents/navigation_service.dart';
import 'package:profit_league_documents/features/notifications/screens/push_details_screen.dart';
import 'package:profit_league_documents/firebase/firebase_options.dart';

class FirebaseService {
  static final FirebaseMessaging messaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
  FlutterLocalNotificationsPlugin();
  static RemoteMessage? _initialMessage;

  static Future<void> initialize() async {
    WidgetsFlutterBinding.ensureInitialized();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ iOS
    if (defaultTargetPlatform == TargetPlatform.iOS) {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—à–µ–π –≤ foreground –¥–ª—è iOS
      await messaging.setForegroundNotificationPresentationOptions(
        alert: true,
        badge: true,
        sound: true,
      );
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const AndroidInitializationSettings androidSettings =
    AndroidInitializationSettings('@mipmap/ic_launcher');
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    const InitializationSettings initSettings =
    InitializationSettings(android: androidSettings, iOS: iosSettings);

    await flutterLocalNotificationsPlugin.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (details) {
        if (details.payload != null) {
          _handleMessage(jsonDecode(details.payload!));
        }
      },
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Android –∫–∞–Ω–∞–ª–æ–≤ (—Ç–≤–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
    if (defaultTargetPlatform == TargetPlatform.android) {
      const newTaskChannel = AndroidNotificationChannel(
        'new_task_channel',
        '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏',
        description: '–ö–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∑–≤—É–∫–æ–º',
        importance: Importance.high,
        sound: RawResourceAndroidNotificationSound('new_task'),
      );

      const defaultChannel = AndroidNotificationChannel(
        'default_channel',
        '–û–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        description: '–ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        importance: Importance.high,
      );

      final androidPlugin = flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();

      await androidPlugin?.createNotificationChannel(newTaskChannel);
      await androidPlugin?.createNotificationChannel(defaultChannel);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É—à–µ–π
    _setupForegroundMessageHandler();
    _setupBackgroundMessageHandler();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ push –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ terminated
    _initialMessage = await messaging.getInitialMessage();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
    String? fcmToken = await messaging.getToken();
    log('‚úÖ FCM Token: $fcmToken');
  }

  /// Foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ data-only –Ω–∞ iOS)
  static void _setupForegroundMessageHandler() {
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      log('üì© –ü–æ–ª—É—á–µ–Ω–æ push-—Å–æ–æ–±—â–µ–Ω–∏–µ (foreground): ${message.data}');

      final notification = message.notification;
      final type = message.data['type'];
      final isNewTask = type == 'new_task';

      // –ù–∞ iOS –ø—É—à —Å notification –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π, –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
      if (notification != null && defaultTargetPlatform == TargetPlatform.iOS) {
        return;
      }

      final title = notification?.title ?? message.data['title'] ?? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      final body = notification?.body ?? message.data['body'] ?? '';

      final androidDetails = AndroidNotificationDetails(
        isNewTask ? 'new_task_channel' : 'default_channel',
        isNewTask ? '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏' : '–û–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        channelDescription: isNewTask
            ? '–ö–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∑–≤—É–∫–æ–º'
            : '–ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        importance: Importance.max,
        priority: Priority.high,
        sound: isNewTask ? RawResourceAndroidNotificationSound('new_task') : null,
        icon: '@mipmap/ic_launcher',
      );

      final iosDetails = const DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      final details = NotificationDetails(android: androidDetails, iOS: iosDetails);

      await flutterLocalNotificationsPlugin.show(
        title.hashCode,
        title,
        body,
        details,
        payload: jsonEncode(message.data),
      );
    });
  }

  /// Background / terminated —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static void _setupBackgroundMessageHandler() {
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      log('üì© Push-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (background): ${message.data}');
      _handleMessage(message.data);
    });
  }

  static void _handleMessage(Map<String, dynamic> data) {
    final context = navigatorKey.currentContext;
    if (context != null) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (_) => PushDetailsScreen(data: data),
        ),
      );
    } else {
      log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—É—à–∞');
    }
  }

  static Map<String, dynamic>? consumeInitialPushData() {
    if (_initialMessage != null) {
      log('üì© Push –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ terminated: ${_initialMessage!.data}');
      final data = _initialMessage!.data;
      _initialMessage = null;
      return data;
    }
    return null;
  }
}
